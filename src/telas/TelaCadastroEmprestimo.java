package telas;

import enums.TipoItem;
import excecoes.PersonalCollectionsException;
import excecoes.ValidacaoException;
import gerenciador.Gerenciador;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import tipos.Amigo;
import tipos.Emprestimo;
import tipos.Item;

/**
 * tela de emprestimos
 *
 * @author Douglas Rafael
 */
public class TelaCadastroEmprestimo extends javax.swing.JDialog {

    private static int id;
    private DefaultTableModel modelTable;
    private Gerenciador manager;

    private static List<Amigo> listaDeAmigos;
    private static List<Item> listaDeItens;

    /**
     * Costrutor TelaEmprestimos
     *
     * @param parent
     * @param modal
     */
    public TelaCadastroEmprestimo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        manager = new Gerenciador();
        initComponents();
        modelTable = (DefaultTableModel) table_emprestimos.getModel();
        populaCombos();
        montaTabelaEmprestimos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_principal = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cb_amigos = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cb_itens = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        tf_data_retirada = new javax.swing.JFormattedTextField();
        tf_data_retorno = new javax.swing.JFormattedTextField();
        panel_tabela = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_emprestimos = new javax.swing.JTable();
        br_inserir = new javax.swing.JButton();
        bt_novo = new javax.swing.JButton();
        bt_cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Empréstimos");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Data de Retorno");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Amigo");

        cb_amigos.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cb_amigos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cb_amigos.setSelectedIndex(-1);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Item");

        cb_itens.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cb_itens.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cb_itens.setSelectedIndex(-1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Data de Retirada");

        try {
            tf_data_retirada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            tf_data_retorno.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        panel_tabela.setBorder(javax.swing.BorderFactory.createTitledBorder("Útimos Empréstimos Cadastrados"));

        table_emprestimos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Item", "Amigo", "Data de Retirada", "Data de Retorno"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_emprestimos);
        if (table_emprestimos.getColumnModel().getColumnCount() > 0) {
            table_emprestimos.getColumnModel().getColumn(0).setPreferredWidth(50);
            table_emprestimos.getColumnModel().getColumn(0).setMaxWidth(50);
            table_emprestimos.getColumnModel().getColumn(3).setPreferredWidth(110);
            table_emprestimos.getColumnModel().getColumn(3).setMaxWidth(110);
            table_emprestimos.getColumnModel().getColumn(4).setPreferredWidth(110);
            table_emprestimos.getColumnModel().getColumn(4).setMaxWidth(110);
        }

        br_inserir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        br_inserir.setText("Cadastrar");
        br_inserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarEmprestimo(evt);
            }
        });

        bt_novo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_novo.setText("Novo");
        bt_novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoEmprestimo(evt);
            }
        });

        bt_cancelar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_cancelar.setText("Cancelar");
        bt_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar(evt);
            }
        });

        javax.swing.GroupLayout panel_tabelaLayout = new javax.swing.GroupLayout(panel_tabela);
        panel_tabela.setLayout(panel_tabelaLayout);
        panel_tabelaLayout.setHorizontalGroup(
            panel_tabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_tabelaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_tabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_tabelaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bt_cancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_novo, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(br_inserir)))
                .addContainerGap())
        );
        panel_tabelaLayout.setVerticalGroup(
            panel_tabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_tabelaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panel_tabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(br_inserir)
                    .addComponent(bt_novo)
                    .addComponent(bt_cancelar))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panel_principalLayout = new javax.swing.GroupLayout(panel_principal);
        panel_principal.setLayout(panel_principalLayout);
        panel_principalLayout.setHorizontalGroup(
            panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_principalLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(panel_principalLayout.createSequentialGroup()
                        .addGroup(panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(tf_data_retirada, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(tf_data_retorno, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(cb_itens, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cb_amigos, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_principalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_tabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_principalLayout.setVerticalGroup(
            panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_principalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cb_amigos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cb_itens, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_principalLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_data_retirada, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_principalLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_data_retorno, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(panel_tabela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_principal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panel_principal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cadastrarEmprestimo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarEmprestimo
        try {
            if (validarCampos()) {
                throw new ValidacaoException("O prenechimento dos seguintes campos são obrigatórios:"
                        + "\nAmigo"
                        + "\nItem"
                        + "\nData de Retirada"
                        + "\nData de Retorno");
            } else {
                Emprestimo emp = getEmprestimoInterface();
                if (emp != null) {
                    manager.inserirEmprestimo(emp);
                    JOptionPane.showMessageDialog(null, "Empréstimo inserido com sucesso!", "Inserção", JOptionPane.INFORMATION_MESSAGE);
                    limpaCampos();
                    montaTabelaEmprestimos();
                }
            }
        } catch (ValidacaoException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Problema na validação", JOptionPane.WARNING_MESSAGE);
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar inserir o empréstimo...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cadastrarEmprestimo

    private void novoEmprestimo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoEmprestimo
        limpaCampos();
    }//GEN-LAST:event_novoEmprestimo

    private void cancelar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar
        this.dispose();
    }//GEN-LAST:event_cancelar

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TelaCadastroEmprestimo dialog = new TelaCadastroEmprestimo(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton br_inserir;
    private javax.swing.JButton bt_cancelar;
    private javax.swing.JButton bt_novo;
    private javax.swing.JComboBox cb_amigos;
    private javax.swing.JComboBox cb_itens;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel_principal;
    private javax.swing.JPanel panel_tabela;
    private javax.swing.JTable table_emprestimos;
    private javax.swing.JFormattedTextField tf_data_retirada;
    private javax.swing.JFormattedTextField tf_data_retorno;
    // End of variables declaration//GEN-END:variables

    /**
     * Monta o objeto Emprestimo com os dados oriundos da interface
     *
     * @return Emprestimo
     */
    private Emprestimo getEmprestimoInterface() {
        try {
            if (listaDeAmigos.isEmpty() || listaDeItens.isEmpty()) {
                throw new ValidacaoException("Só é possível realizar empréstimos se houver Amigos e Itens cadastrados.\nPor favor verificar...");
            } else {
                String tempAmigo[] = ((String) cb_amigos.getSelectedItem()).trim().split("|");
                Amigo amigoSelecinado = manager.pesquisarAmigo(Integer.parseInt(tempAmigo[0]));

                String tempItem[] = ((String) cb_itens.getSelectedItem()).split(" - ");
                String tipo = tempItem[2];
                TipoItem tipo_item = null;

                // Verifica qual o tipo de item
                if (tipo.equals(TipoItem.HQ.getTitulo())) {
                    tipo_item = TipoItem.HQ;
                } else if (tipo.equals(TipoItem.MIDIA.getTitulo())) {
                    tipo_item = TipoItem.MIDIA;
                } else if (tipo.equals(TipoItem.JOGOVIDEOGAME.getTitulo())) {
                    tipo_item = TipoItem.JOGOVIDEOGAME;
                } else if (tipo.equals(TipoItem.JOGOTABULEIRO.getTitulo())) {
                    tipo_item = TipoItem.JOGOTABULEIRO;
                }
                // Busca o item completo
                Item itemSelecionado = manager.pesquisarItem(Integer.parseInt(tempItem[0]), tipo_item);
                itemSelecionado.setEmprestado(true);
                itemSelecionado.setTotalEmprestado();

                String data_retirada = (String) tf_data_retirada.getValue();
                String data_retorno = (String) tf_data_retorno.getValue();

                return new Emprestimo(data_retirada, data_retorno, amigoSelecinado, itemSelecionado);
            }
        } catch (ValidacaoException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Validação", JOptionPane.INFORMATION_MESSAGE);
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar selecionar os dados", "ERRO", JOptionPane.ERROR_MESSAGE);
        }

        return null;
    }

    /**
     * Limpa todos os campos
     */
    private void limpaCampos() {
        cb_amigos.setSelectedIndex(-1);
        cb_itens.setSelectedIndex(-1);
        tf_data_retirada.setValue(null);
        tf_data_retorno.setValue(null);
    }

    /**
     * Popula os comboBox
     */
    private void populaCombos() {
        try {
            limpaCampos();
            listaDeAmigos = manager.listarAmigos();
            listaDeItens = manager.listarItens();
            cb_amigos.setModel(new DefaultComboBoxModel());
            cb_itens.setModel(new DefaultComboBoxModel());

            for (Amigo amigo : listaDeAmigos) {
                cb_amigos.addItem(amigo.getId() + " - " + amigo.getNome());
            }

            for (Item item : listaDeItens) {
                cb_itens.addItem(item.getId() + " - " + item.getTitulo() + " - " + item.getTipo().getTitulo());
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar preencher combos", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Monta tabela com os dados
     *
     */
    private void montaTabelaEmprestimos() {
        try {
            modelTable.setNumRows(0);
            List<Emprestimo> listaDeEmprestimos = new ArrayList<>(manager.listarEmprestimos());
            Collections.sort(listaDeEmprestimos);

            if (!listaDeEmprestimos.isEmpty()) {
                for (Emprestimo e : listaDeEmprestimos) {
                    Object[] o = {e.getId(), e.getItem().getTitulo(), e.getAmigo().getNome(), e.getDataEmprestimo(), e.getDataRetono()};
                    modelTable.addRow(o);
                }
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Problema na tentativa de obter lista de empréstimos!", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Retorna os campos que devem ser validados (obrigatórios)
     *
     * @return Lista com os components
     */
    public List<Component> getCamposValidar() {
        List<Component> components = new ArrayList<>();
        components.add(tf_data_retirada);
        components.add(tf_data_retorno);
        return components;
    }

    /**
     * Valida campos obrigatorios
     *
     * @return
     */
    private boolean validarCampos() {
        if (cb_amigos.getSelectedIndex() == -1 || cb_itens.getSelectedIndex() == -1) {
            return true;
        } else if (tf_data_retirada.getValue() == null || tf_data_retorno.getValue() == null) {
            return true;
        }

        return false;
    }

}
