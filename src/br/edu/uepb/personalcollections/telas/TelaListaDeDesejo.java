package br.edu.uepb.personalcollections.telas;

import br.edu.uepb.personalcollections.Item;
import br.edu.uepb.personalcollections.ListaDeDesejo;
import br.edu.uepb.personalcollections.excecoes.PersonalCollectionsException;
import br.edu.uepb.personalcollections.gerenciador.Gerenciador;
import br.edu.uepb.personalcollections.util.MyData;
import java.io.IOException;
import java.util.Collections;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.util.List;
import java.util.LinkedList;
import javax.swing.table.DefaultTableModel;

/**
 * Interface gráfica. Tela da WhishList (Lista de Desejo)
 *
 * @author Douglas Rafael
 */
public class TelaListaDeDesejo extends javax.swing.JDialog {

    private static final long serialVersionUID = 39597246246343522L;

    private DefaultTableModel modelTable;
    private List<ListaDeDesejo> listaDeDesejo;
    private Gerenciador manager;
    private static TelaPrincipal telaPrincipal;

    /**
     * Método construtor TelaListaDeDesejo.
     *
     * @param parent O JFrame de origem
     * @param modal Se modal (true), caso contrário (false)
     */
    public TelaListaDeDesejo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        if (parent != null) {
            TelaListaDeDesejo.telaPrincipal = (TelaPrincipal) parent;
        }

        initComponents();
        this.manager = new Gerenciador();

        montaTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_itens = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        lb_total = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lb_total_preco = new javax.swing.JLabel();
        bt_possui = new javax.swing.JButton();
        bt_deletar = new javax.swing.JButton();
        bt_comprado_tudo = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro Lista de Desejo");
        setIconImage(new ImageIcon("images/logo.png").getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                fecharJanela(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista de Itens da Sua Lista de Desejos"));

        table_itens.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        table_itens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Título do Item", "Tipo do Item", "Data de Lançamento", "Site Para Compra", "Preço"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_itens.setToolTipText("Duplo clique para abrir o site de compra caso exista.");
        table_itens.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                abrirUrl(evt);
            }
        });
        jScrollPane1.setViewportView(table_itens);
        if (table_itens.getColumnModel().getColumnCount() > 0) {
            table_itens.getColumnModel().getColumn(0).setPreferredWidth(120);
            table_itens.getColumnModel().getColumn(1).setPreferredWidth(70);
            table_itens.getColumnModel().getColumn(2).setPreferredWidth(50);
            table_itens.getColumnModel().getColumn(4).setPreferredWidth(60);
        }

        jLabel3.setText("Total de itens cadastradas: ");

        lb_total.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lb_total.setText("0");

        jLabel1.setText("Valor Total dos Itens: R$");

        lb_total_preco.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lb_total_preco.setText("0.0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lb_total_preco)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lb_total)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lb_total))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lb_total_preco))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        bt_possui.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_possui.setText("Comprado");
        bt_possui.setToolTipText("Sinalize que possui o item, o mesmo deverá aparecer em sua lista de itens cadastrados...");
        bt_possui.setEnabled(false);
        bt_possui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemComprado(evt);
            }
        });

        bt_deletar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_deletar.setIcon(new ImageIcon("images/delete.png"));
        bt_deletar.setText("Deletar");
        bt_deletar.setToolTipText("Remover item desta lista de série.");
        bt_deletar.setEnabled(false);
        bt_deletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletarItem(evt);
            }
        });

        bt_comprado_tudo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_comprado_tudo.setText("Comprado Tudo");
        bt_comprado_tudo.setEnabled(false);
        bt_comprado_tudo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todosItensComprados(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton3.setIcon(new ImageIcon("images/new.png"));
        jButton3.setText("Novo");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoItem(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bt_deletar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_comprado_tudo)
                        .addGap(10, 10, 10)
                        .addComponent(bt_possui, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_possui, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_comprado_tudo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_deletar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Remove item da lista de desejo.
     *
     * @param evt O evento
     */
    private void deletarItem(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletarItem
        try {
            if (!listaDeDesejo.isEmpty() && getLinhaSelecionada() >= 0) {
                ListaDeDesejo o = getItemSelecionado();
                if (o != null) {
                    int opcao = JOptionPane.showConfirmDialog(null, "Deseja realmente remover o item: \"" + o.getItem().getTitulo() + "\"?", "Deletar item", JOptionPane.YES_NO_OPTION);
                    if (opcao == JOptionPane.YES_OPTION) {
                        if (manager.removerItemListaDeDesejo(o)) {
                            montaTabela();
                            JOptionPane.showMessageDialog(null, "Item de título: \"" + o.getItem().getTitulo() + "\" foi removida com sucesso!", "Remoção", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            throw new PersonalCollectionsException("Não foi possível remover a item: \"" + o.getItem().getTitulo() + "\". Tente novamente!");
                        }
                    }
                }
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar remover o item da série...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deletarItem

    /**
     * Fecha Janela.
     *
     * @param evt O evento
     */
    private void fecharJanela(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_fecharJanela
        // Atualiza a tela principal
        if (TelaListaDeDesejo.telaPrincipal != null) {
            TelaListaDeDesejo.telaPrincipal.refresh();
        }
        this.dispose();
    }//GEN-LAST:event_fecharJanela

    /**
     * Abre tela para cadastro de item na lista de desejo.
     *
     * @param evt O evento
     */
    private void novoItem(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoItem
        this.dispose();
        new TelaCadastroListaDeDesejo(null, true, null).setVisible(true);
    }//GEN-LAST:event_novoItem

    private void abrirUrl(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_abrirUrl
        if (evt.getClickCount() == 1) {
            bt_possui.setEnabled(true);
            bt_deletar.setEnabled(true);
        } else if (evt.getClickCount() == 2) {// Se foi um duplo clique
            try {
                String url_open = (String) table_itens.getValueAt(getLinhaSelecionada(), 3);
                if (!url_open.isEmpty()) {
                    java.awt.Desktop.getDesktop().browse(java.net.URI.create(url_open));
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar abrir URL", "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_abrirUrl

    /**
     * Sinaliza item como comprado e remove-o da lista de desejo. O mesmo irá
     * aparecer no acervo de itens cadastrados.
     *
     * @param evt O evento
     */
    private void itemComprado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemComprado
        try {
            if (!listaDeDesejo.isEmpty() && getLinhaSelecionada() >= 0) {
                ListaDeDesejo o = getItemSelecionado();
                if (o != null) {
                    int opcao = JOptionPane.showConfirmDialog(null, "Deseja realmente marcar o item: \"" + o.getItem().getTitulo() + "\" como comprado?"
                            + "\nO mesmo será removido da sua Lista de Desejo e transferido para seu acervo de itens.", "Item Comprado!", JOptionPane.YES_NO_OPTION);
                    if (opcao == JOptionPane.YES_OPTION) {
                        if (manager.removerItemListaDeDesejo(o)) {
                            Item item = o.getItem();
                            item.setDataDeCompra(MyData.getDataAtual()); // data atual do sistema
                            item.setPossui(true);
                            item.setEmprestado(false);
                            manager.inserirItem(item);

                            // Atualiza tabela
                            montaTabela();

                            JOptionPane.showMessageDialog(null, "O item: \"" + o.getItem().getTitulo() + "\" foi tranferido da sua Lista de Desejo para sua lista de acervo com sucesso!", "Comprado!", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar sinalizar item como comprado...\nTente novamente!", "ERRO", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar sinalizar item como comprado...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemComprado

    /**
     * Sinaliza todos os itens da lista de desejo como comprado e remove-os da
     * lista de desejo. Os mesmos irão aparecer no acervo de itens cadastrados.
     *
     * @param evt O evento
     */
    private void todosItensComprados(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_todosItensComprados
        try {
            List<ListaDeDesejo> lista = new LinkedList<>(manager.listarListaDeDesejo());
            if (!lista.isEmpty()) {
                int opcao = JOptionPane.showConfirmDialog(null, "Deseja realmente marcar todos os itens da sua Lista de Desejo como comprados?"
                        + "\nOs mesmos serão removidos da sua Lista de Desejo e transferidos para seu acervo de itens.", "Itens Comprados!", JOptionPane.YES_NO_OPTION);
                if (opcao == JOptionPane.YES_OPTION) {
                    for (ListaDeDesejo l : lista) {
                        if (manager.removerItemListaDeDesejo(l)) {
                            Item item = l.getItem();
                            item.setDataDeCompra(MyData.getDataAtual()); // data atual do sistema
                            item.setPossui(true);
                            item.setEmprestado(false);
                            manager.inserirItem(item);
                        }
                    }
                    // Atualiza tabela
                    montaTabela();
                    JOptionPane.showMessageDialog(null, "Os itens forão tranferidos da sua Lista de Desejo para sua lista de acervo com sucesso!", "Comprado!", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar sinalizar itens como comprados...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_todosItensComprados

    /**
     * Retorna a linah selecionada da tabela.
     *
     * @return <code>int</code> O index da linha selecionada
     */
    private int getLinhaSelecionada() {
        return table_itens.getSelectedRow();
    }

    /**
     * Método main.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaListaDeDesejo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaListaDeDesejo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaListaDeDesejo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaListaDeDesejo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TelaListaDeDesejo dialog = new TelaListaDeDesejo(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    /**
     * Popula tabela com os dados
     */
    private void montaTabela() {
        try {
            double precoTotal = 0.0;
            int total = 0;
            listaDeDesejo = manager.listarListaDeDesejo();
            modelTable = (DefaultTableModel) table_itens.getModel();
            modelTable.setNumRows(0); // Zera a tabela
            if (!listaDeDesejo.isEmpty()) {
                bt_comprado_tudo.setEnabled(true);
                Collections.sort(listaDeDesejo);
                for (ListaDeDesejo l : listaDeDesejo) {
                    Object[] o = {l.getItem().getTitulo(), l.getItem().getTipo().getTitulo(), l.getDataDeLancamento(), l.getUrlDeCompra(), String.format("%.2f", l.getItem().getPrecoDeCompra())};
                    precoTotal += l.getItem().getPrecoDeCompra();
                    modelTable.addRow(o);
                }
            } else {
                bt_deletar.setEnabled(false);
            }
            lb_total.setText(String.valueOf(listaDeDesejo.size()));
            lb_total_preco.setText(String.format("%.2f", precoTotal));
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar popular tabela...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Recupera o item selecionado na tabela.
     *
     * @return Item selecionado
     */
    public ListaDeDesejo getItemSelecionado() {
        try {
            String titulo = (String) table_itens.getValueAt(getLinhaSelecionada(), 0);
            return manager.pesquisarItemListaDeDesejo(titulo);
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar selecionar Item...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_comprado_tudo;
    private javax.swing.JButton bt_deletar;
    private javax.swing.JButton bt_possui;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_total;
    private javax.swing.JLabel lb_total_preco;
    private javax.swing.JTable table_itens;
    // End of variables declaration//GEN-END:variables
}
