package br.edu.uepb.personalcollections.telas;

import br.edu.uepb.personalcollections.enums.TipoItem;
import br.edu.uepb.personalcollections.excecoes.PersonalCollectionsException;
import br.edu.uepb.personalcollections.excecoes.ValidacaoException;
import br.edu.uepb.personalcollections.gerenciador.Gerenciador;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import br.edu.uepb.personalcollections.Amigo;
import br.edu.uepb.personalcollections.Emprestimo;
import br.edu.uepb.personalcollections.Item;
import datechooser.model.exeptions.IncompatibleDataExeption;
import java.util.Calendar;
import java.util.Date;
import javax.swing.ImageIcon;

/**
 * Tela de Empréstimos
 *
 * @author Douglas Rafael
 */
public class TelaCadastroEmprestimo extends javax.swing.JDialog {

    private static final long serialVersionUID = 6561682141171362562L;

    private final int TOTAL_DIAS_DATA = 15;
    private final String STRCADASTRAR = "Cadastrar";
    private final String STRATUALIZAR = "Atualizar";

    private int id;
    private Emprestimo emprestimo;
    private DefaultTableModel modelTable;
    private Gerenciador manager;

    private List<Amigo> listaDeAmigos;
    private List<Item> listaDeItens;
    private TelaPrincipal telaPrincipal;

    /**
     * Costrutor TelaEmprestimos
     *
     * @param parent
     * @param modal
     */
    public TelaCadastroEmprestimo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        if(parent != null) {
            this.telaPrincipal = (TelaPrincipal) parent;
        }
        
        manager = new Gerenciador();
        initComponents();
        modelTable = (DefaultTableModel) table_emprestimos.getModel();
        populaCoponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_principal = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cb_amigos = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cb_itens = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        panel_tabela = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_emprestimos = new javax.swing.JTable();
        bt_inserir = new javax.swing.JButton();
        bt_novo = new javax.swing.JButton();
        bt_cancelar = new javax.swing.JButton();
        bt_deletar = new javax.swing.JButton();
        bt_finalizar = new javax.swing.JButton();
        tf_data_retirada = new datechooser.beans.DateChooserCombo();
        tf_data_retorno = new datechooser.beans.DateChooserCombo();
        lb_data_retorno = new javax.swing.JLabel();
        lb_data_retorno1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Empréstimos");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                fechaJanela(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Data de Retorno");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Amigo");

        cb_amigos.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cb_amigos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSelecionado(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Item");

        cb_itens.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cb_itens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSelecionado(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Data de Retirada");

        panel_tabela.setBorder(javax.swing.BorderFactory.createTitledBorder("Útimos Empréstimos Cadastrados"));

        table_emprestimos.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        table_emprestimos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Item", "Amigo", "Data de Retirada", "Data de Retorno", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_emprestimos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                linhaSelecionada(evt);
            }
        });
        jScrollPane1.setViewportView(table_emprestimos);
        if (table_emprestimos.getColumnModel().getColumnCount() > 0) {
            table_emprestimos.getColumnModel().getColumn(0).setPreferredWidth(50);
            table_emprestimos.getColumnModel().getColumn(0).setMaxWidth(50);
            table_emprestimos.getColumnModel().getColumn(3).setPreferredWidth(110);
            table_emprestimos.getColumnModel().getColumn(3).setMaxWidth(110);
            table_emprestimos.getColumnModel().getColumn(4).setPreferredWidth(110);
            table_emprestimos.getColumnModel().getColumn(4).setMaxWidth(110);
            table_emprestimos.getColumnModel().getColumn(5).setPreferredWidth(50);
        }

        bt_inserir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_inserir.setIcon(new ImageIcon("images/save.png"));
        bt_inserir.setText("Cadastrar");
        bt_inserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserir(evt);
            }
        });

        bt_novo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_novo.setIcon(new ImageIcon("images/new.png"));
        bt_novo.setText("Novo");
        bt_novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoEmprestimo(evt);
            }
        });

        bt_cancelar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_cancelar.setIcon(new ImageIcon("images/cancel.png"));
        bt_cancelar.setText("Cancelar");
        bt_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar(evt);
            }
        });

        bt_deletar.setIcon(new ImageIcon("images/delete.png"));
        bt_deletar.setText("Deletar");
        bt_deletar.setToolTipText("Remover empréstimo. Todo registro relacionado a esse empréstimo será perdido.");
        bt_deletar.setEnabled(false);
        bt_deletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEmprestimo(evt);
            }
        });

        bt_finalizar.setIcon(new ImageIcon("images/finalize.png"));
        bt_finalizar.setText("Finalizar");
        bt_finalizar.setToolTipText("Marcar o empréstimo como finalizado. O item voltará ficar disponível para novos empréstimos...");
        bt_finalizar.setEnabled(false);
        bt_finalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizarEmprestimo(evt);
            }
        });

        javax.swing.GroupLayout panel_tabelaLayout = new javax.swing.GroupLayout(panel_tabela);
        panel_tabela.setLayout(panel_tabelaLayout);
        panel_tabelaLayout.setHorizontalGroup(
            panel_tabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_tabelaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_tabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_tabelaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bt_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_novo, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_deletar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_finalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_inserir, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panel_tabelaLayout.setVerticalGroup(
            panel_tabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_tabelaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_tabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_inserir, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_novo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_deletar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_finalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tf_data_retirada.setNothingAllowed(false);
        tf_data_retirada.setFormat(2);
        tf_data_retirada.setFieldFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 12));

        tf_data_retorno.setNothingAllowed(false);
        tf_data_retorno.setFieldFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 12));

        lb_data_retorno.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        lb_data_retorno.setForeground(new java.awt.Color(102, 102, 102));
        lb_data_retorno.setText("()");

        lb_data_retorno1.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        lb_data_retorno1.setForeground(new java.awt.Color(102, 102, 102));
        lb_data_retorno1.setText("(Será listado apenas os itens disponíveis para empréstimo)");

        javax.swing.GroupLayout panel_principalLayout = new javax.swing.GroupLayout(panel_principal);
        panel_principal.setLayout(panel_principalLayout);
        panel_principalLayout.setHorizontalGroup(
            panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_principalLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(cb_amigos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addComponent(tf_data_retirada, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel_principalLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lb_data_retorno1))
                    .addComponent(cb_itens, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panel_principalLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lb_data_retorno))
                    .addComponent(tf_data_retorno, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE))
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_principalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_tabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_principalLayout.setVerticalGroup(
            panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_principalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_principalLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cb_amigos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_principalLayout.createSequentialGroup()
                        .addGroup(panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lb_data_retorno1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cb_itens, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(lb_data_retorno))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tf_data_retirada, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_data_retorno, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(panel_tabela, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_principal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panel_principal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Cadastra empréstimo.
     *
     * @param evt
     */
    private void inserir(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserir
        try {
            if (!validarCampos()) {
                throw new ValidacaoException("O prenechimento dos seguintes campos são obrigatórios:"
                        + "\nAmigo"
                        + "\nItem"
                        + "\nData de Retirada"
                        + "\nData de Retorno");
            } else {
                Emprestimo emp = getEmprestimoInterface();
                if (emp != null) {
                    manager.inserirEmprestimo(emp);
                    JOptionPane.showMessageDialog(null, "Empréstimo inserido com sucesso!", "Inserção", JOptionPane.INFORMATION_MESSAGE);
                    populaCoponents();
                }
            }
        } catch (ValidacaoException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Problema na validação", JOptionPane.WARNING_MESSAGE);
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar inserir o empréstimo...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_inserir

    /**
     * Novo emprestimo. Todos os campos ssão limpados.
     *
     * @param evt
     */
    private void novoEmprestimo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoEmprestimo
        limpaCampos();
    }//GEN-LAST:event_novoEmprestimo

    /**
     * A JDialog é fechado.
     *
     * @param evt
     */
    private void cancelar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar
        fechaJanela(null);
    }//GEN-LAST:event_cancelar

    /**
     * Remove o empréstimo do sistema.
     *
     * @param evt
     */
    private void removeEmprestimo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEmprestimo
        try {
            if (getEmprestimo() != null) {
                int opcao = JOptionPane.showConfirmDialog(null, "Deseja realmente remover o empréstimo selecionado?\n"
                        + "Todo registro relacionado a esse empréstimo será perdido e o item ficará disponível para novos empréstimos.", "Deletar empréstimo", JOptionPane.YES_NO_OPTION);
                if (opcao == JOptionPane.YES_OPTION) {
                    if (!manager.removerEmprestimo(getEmprestimo())) {
                        throw new PersonalCollectionsException("Não foi possível remover o empréstimo.");
                    } else {
                        JOptionPane.showMessageDialog(null, "Empréstimo removido com sucesso!", "Remorção", JOptionPane.INFORMATION_MESSAGE);
                        populaCoponents();
                    }
                }
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Problema na exclusão!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_removeEmprestimo

    /**
     * Captura dodos do empréstimo que foi selecionado pelo mouse.
     *
     * @param evt
     */
    private void linhaSelecionada(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linhaSelecionada
        int linha = table_emprestimos.getSelectedRow();
        if (evt.getClickCount() == 1 && linha >= 0) {
            limpaCombos();
            bt_deletar.setEnabled(true);
            bt_finalizar.setEnabled(true);
            bt_inserir.setEnabled(false);
            setId(Integer.parseInt((String) table_emprestimos.getValueAt(linha, 0)));
            if ("Finalizado".equals(table_emprestimos.getValueAt(linha, 5))) {
                bt_finalizar.setEnabled(false);
            } else {
                bt_finalizar.setEnabled(true);
            }
            setEmprestimo(getId());
        }
    }//GEN-LAST:event_linhaSelecionada

    /**
     * Finaliza um empréstimo.
     *
     * @param evt
     */
    private void finalizarEmprestimo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizarEmprestimo
        try {
            if (getEmprestimo() != null) {
                Emprestimo e = getEmprestimo();
                if (e.getItem().isEmprestado()) {
                    int opcao = JOptionPane.showConfirmDialog(null, "Deseja realmente finalizar o empréstimo selecionado que está ATIVO?\nSe finalizado o item ficará disponível para novos empréstimos.", "Finalizar empréstimo", JOptionPane.YES_NO_OPTION);
                    if (opcao == JOptionPane.YES_OPTION) {
                        Item item = manager.pesquisarItem(e.getItem().getId(), e.getItem().getTipo());
                        if (item != null) {
                            e.setItem(item);
                        }
                        manager.finalizarEmprestimo(e);
                        JOptionPane.showMessageDialog(null, "Empréstimo finalizado com sucesso!", "Finalização", JOptionPane.INFORMATION_MESSAGE);
                        populaCoponents();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "O empréstimo selecionado já está finalizado!", "Finalização", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Problema na finalização do empréstimo!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_finalizarEmprestimo

    /**
     * Identifica se algum item dos combobox foram selecionados e se sim ativa o
     * botao adastrar.
     *
     * @param evt
     */
    private void comboSelecionado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSelecionado
        if (cb_amigos.getSelectedIndex() != -1 || cb_itens.getSelectedIndex() != -1) {
            bt_deletar.setEnabled(false);
            bt_finalizar.setEnabled(false);
            bt_inserir.setEnabled(true);
        }
    }//GEN-LAST:event_comboSelecionado

    /**
     * Fecha Janela.
     *
     * @param evt
     */
    private void fechaJanela(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_fechaJanela
        // Atualiza a tela principal
        telaPrincipal.refresh();
        this.dispose();
    }//GEN-LAST:event_fechaJanela

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TelaCadastroEmprestimo dialog = new TelaCadastroEmprestimo(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    /**
     * Monta o objeto Emprestimo com os dados oriundos da interface
     *
     * @return Emprestimo
     */
    private Emprestimo getEmprestimoInterface() {
        try {
            if (this.listaDeAmigos.isEmpty() || this.listaDeItens.isEmpty()) {
                throw new ValidacaoException("Só é possível realizar empréstimos se houver Amigos e Itens cadastrados.\nPor favor verificar...");
            } else {
                String tempAmigo[] = ((String) cb_amigos.getSelectedItem()).trim().split("([\\[\\]])");
                Amigo amigoSelecinado = manager.pesquisarAmigo(Integer.parseInt(tempAmigo[1]));

                String tempItem[] = ((String) cb_itens.getSelectedItem()).split("([\\[\\]])");
                String tipo = tempItem[3];
                TipoItem tipo_item = null;

                // Verifica qual o tipo de item
                if (tipo.equals(TipoItem.HQ.getTitulo())) {
                    tipo_item = TipoItem.HQ;
                } else if (tipo.equals(TipoItem.MIDIA.getTitulo())) {
                    tipo_item = TipoItem.MIDIA;
                } else if (tipo.equals(TipoItem.JOGOVIDEOGAME.getTitulo())) {
                    tipo_item = TipoItem.JOGOVIDEOGAME;
                } else if (tipo.equals(TipoItem.JOGOTABULEIRO.getTitulo())) {
                    tipo_item = TipoItem.JOGOTABULEIRO;
                }
                // Busca o item completo
                Item itemSelecionado = manager.pesquisarItem(Integer.parseInt(tempItem[1]), tipo_item);
                itemSelecionado.setEmprestado(true);
                itemSelecionado.setTotalEmprestado();

                String data_retirada = tf_data_retirada.getText();
                String data_retorno = tf_data_retorno.getText();

                manager.setIdEmprestimo();
                return new Emprestimo(data_retirada, data_retorno, false, amigoSelecinado, itemSelecionado);
            }
        } catch (ValidacaoException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Validação", JOptionPane.INFORMATION_MESSAGE);
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar selecionar os dados", "ERRO", JOptionPane.ERROR_MESSAGE);
        }

        return null;
    }

    /**
     * Limpa todos os campos
     */
    private void limpaCampos() {
        bt_inserir.setText(STRCADASTRAR);
        bt_deletar.setEnabled(false);
        bt_finalizar.setEnabled(false);
        bt_inserir.setEnabled(true);
        tf_data_retirada.setSelectedDate(Calendar.getInstance());
        setSugestaoDataDias(TOTAL_DIAS_DATA);
        limpaCombos();
    }

    /**
     * Limpa combobox.
     *
     */
    private void limpaCombos() {
        cb_amigos.setSelectedIndex(-1);
        cb_itens.setSelectedIndex(-1);
    }

    /**
     * Popula os comboBox
     */
    private void populaCoponents() {
        try {
            limpaCampos();
            this.listaDeAmigos = manager.listarAmigos();
            this.listaDeItens = manager.listarItensDisponivelEmprestimo();
            cb_amigos.setModel(new DefaultComboBoxModel());
            cb_itens.setModel(new DefaultComboBoxModel());

            for (Amigo amigo : listaDeAmigos) {
                cb_amigos.addItem(String.format("[%04d] ", amigo.getId()) + amigo.getNome());
            }

            Collections.sort(listaDeItens);
            for (Item item : listaDeItens) {
                // Se o item já está emprestado ele não irá parecer na lista de disponíveis
                if (!item.isEmprestado()) {
                    cb_itens.addItem(String.format("[%04d] ", item.getId()) + item.getTitulo() + " [" + item.getTipo().getTitulo() + "]");
                }
            }
            // Seta os combobox e botoes para os estados defaults
            limpaCampos();

            // Data de retorno
            lb_data_retorno.setText("(Total de dias sugerido para retorno: " + TOTAL_DIAS_DATA + " dias)");

            // Monta tabela com os emprestimos
            montaTabelaEmprestimos();
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar preencher combos", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Monta tabela com os dados
     *
     */
    private void montaTabelaEmprestimos() {
        try {
            modelTable.setNumRows(0);
            List<Emprestimo> listaDeEmprestimos = new ArrayList<>(manager.listarEmprestimos());
            Collections.sort(listaDeEmprestimos);

            if (!listaDeEmprestimos.isEmpty()) {
                for (Emprestimo e : listaDeEmprestimos) {
                    if (e.getItem() != null) {
                        Object[] o = {String.format("%04d", e.getId()), String.format("[%04d]", e.getItem().getId()) + " - " + e.getItem().getTitulo(), e.getAmigo().getNome(), e.getDataEmprestimo(), e.getDataRetono(), e.getStatus()};
                        modelTable.addRow(o);
                    }
                }
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Problema na tentativa de obter lista de empréstimos!", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Retorna os campos que devem ser validados (obrigatórios)
     *
     * @return Lista com os components
     */
    public List<Component> getCamposValidar() {
        List<Component> components = new ArrayList<>();
        components.add(tf_data_retirada);
        components.add(tf_data_retorno);
        return components;
    }

    /**
     * Valida campos obrigatorios
     *
     * @return
     */
    private boolean validarCampos() {
        return !((cb_amigos.getSelectedIndex() == -1 || cb_itens.getSelectedIndex() == -1)
                || (tf_data_retirada.getText() == null || tf_data_retorno.getText() == null));
    }

    /**
     * Pega a data atual e seta, acrescenta mais dias de acordo com o valor
     * passado como parametro. Um objeto do tipo Calendar é retornado.
     *
     * @param dias Total de dias a ser acrescentado a data atual
     * @return O calendar com o total de dias a mais
     */
    private void setSugestaoDataDias(int dias) {
        try {
            Calendar c = Calendar.getInstance();
            c.setTime(new Date());
            c.add(Calendar.DATE, dias);

            tf_data_retorno.setDefaultPeriods(new datechooser.model.multiple.PeriodSet(new datechooser.model.multiple.Period(new java.util.GregorianCalendar(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH)))));
        } catch (IncompatibleDataExeption ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar montar data de retorno...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Recupera o id do emprestimo a ser editado
     *
     * @return
     */
    public int getId() {
        return id;
    }

    /**
     * Seta o id do emprestimo a ser editado
     *
     * @param id
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Recupera objeto selecionado da tabele.
     *
     * @return Objeto empréstimo
     */
    public Emprestimo getEmprestimo() {
        return emprestimo;
    }

    /**
     * Seta o objeto empréstimo selecionado da tabela.
     *
     * @param idEmp Id do emprestimo
     */
    public void setEmprestimo(int idEmp) {
        try {
            Emprestimo e = manager.pesquisarEmprestimo(idEmp);
            if (e != null) {
                this.emprestimo = e;
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar recuperar o empréstimo selecionado...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_cancelar;
    private javax.swing.JButton bt_deletar;
    private javax.swing.JButton bt_finalizar;
    private javax.swing.JButton bt_inserir;
    private javax.swing.JButton bt_novo;
    private javax.swing.JComboBox cb_amigos;
    private javax.swing.JComboBox cb_itens;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_data_retorno;
    private javax.swing.JLabel lb_data_retorno1;
    private javax.swing.JPanel panel_principal;
    private javax.swing.JPanel panel_tabela;
    private javax.swing.JTable table_emprestimos;
    private datechooser.beans.DateChooserCombo tf_data_retirada;
    private datechooser.beans.DateChooserCombo tf_data_retorno;
    // End of variables declaration//GEN-END:variables
}
