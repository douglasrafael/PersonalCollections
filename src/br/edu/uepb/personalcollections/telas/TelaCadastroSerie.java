package br.edu.uepb.personalcollections.telas;

import br.edu.uepb.personalcollections.Item;
import br.edu.uepb.personalcollections.Serie;
import br.edu.uepb.personalcollections.enums.TipoItem;
import br.edu.uepb.personalcollections.excecoes.PersonalCollectionsException;
import br.edu.uepb.personalcollections.excecoes.ValidacaoException;
import br.edu.uepb.personalcollections.gerenciador.Gerenciador;
import br.edu.uepb.personalcollections.util.MyData;
import java.util.Collections;
import java.util.List;
import java.util.LinkedList;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 * Interface gráfica. Tela para Cadastro de Série
 *
 * @author Douglas Rafael
 */
public class TelaCadastroSerie extends javax.swing.JDialog {

    private static final long serialVersionUID = -7013782377784339332L;

    private final String STRPOSSUI = "Possuo";
    private final String STRNAOPOSSUI = "Não Possuo";

    private static List<Item> listaDeItensSerie = new LinkedList<>();
    private static List<Item> temp_listaDeItensSerie;
    private static String titulo;
    private static String temp_titulo;
    private static boolean flag = true;
    private static int idSerie;
    private Gerenciador manager;

    /**
     * Método construtor TelaSeries.
     *
     * @param parent O JFrame de origem
     * @param modal Se modal (true), caso contrário (false)
     * @param item O item
     * @param idS O id da serie
     */
    public TelaCadastroSerie(java.awt.Frame parent, boolean modal, Item item, int idS) {
        super(parent, modal);
        manager = new Gerenciador();
        idSerie = idS;

        initComponents();

        tf_titulo.setText(titulo);
        if (item != null) {
            listaDeItensSerie.add(item);
            montaTabela();
        } else {
            refresh();
        }

        // So entra uma vez
        if (flag) {
            // Seta para true, isso garante que só irá entrar aqui uma unica vez por série
            setFlag(false);
            temp_titulo = tf_titulo.getText();
            temp_listaDeItensSerie = new LinkedList<>(listaDeItensSerie);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_itens = new javax.swing.JTable();
        bt_cancelar = new javax.swing.JButton();
        bt_deletar = new javax.swing.JButton();
        bt_novo_item = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        tf_titulo = new javax.swing.JTextField();
        bt_inserir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lb_total = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cb_tipoItem = new javax.swing.JComboBox();
        cb_itens = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        bt_inserir_item = new javax.swing.JButton();
        bt_possui = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gerenciar Série");
        setIconImage(new ImageIcon("images/logo.png").getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                fecharJanela(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista dos itens da série"));

        table_itens.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        table_itens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Título do Item", "Tipo do Item", "Estado", "Possui?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_itens.setToolTipText("");
        table_itens.getTableHeader().setReorderingAllowed(false);
        table_itens.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ativaBotoes(evt);
            }
        });
        jScrollPane1.setViewportView(table_itens);
        if (table_itens.getColumnModel().getColumnCount() > 0) {
            table_itens.getColumnModel().getColumn(0).setPreferredWidth(50);
            table_itens.getColumnModel().getColumn(0).setMaxWidth(50);
            table_itens.getColumnModel().getColumn(4).setPreferredWidth(50);
            table_itens.getColumnModel().getColumn(4).setMaxWidth(50);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 193, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        bt_cancelar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_cancelar.setIcon(new ImageIcon("images/cancel.png"));
        bt_cancelar.setText("Cancelar");
        bt_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_cancelar(evt);
            }
        });

        bt_deletar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_deletar.setIcon(new ImageIcon("images/delete.png"));
        bt_deletar.setText("Deletar");
        bt_deletar.setToolTipText("Remover item desta lista de série.");
        bt_deletar.setEnabled(false);
        bt_deletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletarItem(evt);
            }
        });

        bt_novo_item.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_novo_item.setIcon(new ImageIcon("images/new.png"));
        bt_novo_item.setText("Inserir novo item");
        bt_novo_item.setToolTipText("Insira quantos itens desejar a série.");
        bt_novo_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirNovoItem(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Título da Série");

        tf_titulo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tf_titulo.setMargin(new java.awt.Insets(2, 5, 2, 2));

        bt_inserir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_inserir.setIcon(new ImageIcon("images/save.png"));
        bt_inserir.setText("Salvar");
        bt_inserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarSerie(evt);
            }
        });

        jLabel1.setText("Total de Itens da série: ");

        lb_total.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lb_total.setText("0");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Tipo do Item");

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("(Selecione o tipo de item que deseja incluir a essa série...)");

        cb_tipoItem.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cb_tipoItem.setModel(new DefaultComboBoxModel(TipoItem.values()));

        cb_itens.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Itens");

        jLabel6.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("(Selecione o item e clique em adicionar ou adicione um novo item...)");

        bt_inserir_item.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_inserir_item.setText("Inserir item");
        bt_inserir_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirItem(evt);
            }
        });

        bt_possui.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_possui.setText("Possuo");
        bt_possui.setToolTipText("Sinalize que possui o item ou não, o mesmo deverá aparecer em sua lista de itens cadastrados caso seja sinalizado como possui...");
        bt_possui.setEnabled(false);
        bt_possui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PossuiItem(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lb_total)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bt_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bt_deletar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bt_possui, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bt_inserir, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(tf_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 296, Short.MAX_VALUE)
                                        .addComponent(cb_tipoItem, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(cb_itens, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bt_novo_item, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bt_inserir_item, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_tipoItem, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_novo_item, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_itens, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_inserir_item, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bt_inserir, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bt_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bt_deletar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bt_possui, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(lb_total)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Fecha janela. É verificado antes de fechar se os dodos foram salvos.
     * <code>showConfirmDialog</code> é utilizado para receber a decição do
     * usuário de fechar a janela sem salvar os dados ou não.
     *
     * @param evt O evento
     */
    private void fecharJanela(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_fecharJanela
        setDefaultCloseOperation(this.DO_NOTHING_ON_CLOSE); // Nao deixa a tela fechar sem antes fazer as validações abaixo

        if (isAlteracao()) {
            int opcao = JOptionPane.showConfirmDialog(null, "Você fez alterações, mas ainda não salvou os dados.\nDeseja realmente sair sem salvar?", "Aviso!", JOptionPane.YES_NO_OPTION);

            if (opcao == JOptionPane.YES_OPTION) {
                if (validaCampos()) {
                    clearComponents();
                    this.dispose();
                    new TelaSeries(null, true).setVisible(true);
                }
            }
        } else {
            clearComponents();
            this.dispose();
            new TelaSeries(null, true).setVisible(true);
        }
    }//GEN-LAST:event_fecharJanela

    /**
     * Fecha janela.
     *
     * @param evt O evento
     */
    private void bt_cancelar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_cancelar
        fecharJanela(null);
    }//GEN-LAST:event_bt_cancelar

    /**
     * Ativa botões: deletar e adquirido quando um item da tabela for
     * selecionado.
     *
     * @param evt O evento
     */
    private void ativaBotoes(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ativaBotoes
        if (evt.getClickCount() == 1) {
            bt_deletar.setEnabled(true);
            bt_possui.setEnabled(true);
            String possui = (String) table_itens.getValueAt(table_itens.getSelectedRow(), 4);
            if (possui.equals("Sim")) {
                bt_possui.setText(STRNAOPOSSUI);
            } else {
                bt_possui.setText(STRPOSSUI);
            }
        }
    }//GEN-LAST:event_ativaBotoes

    /**
     * Excluí item da série.
     *
     * @param evt O evento
     */
    private void deletarItem(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletarItem
        try {
            if (!listaDeItensSerie.isEmpty()) {
                int linha = table_itens.getSelectedRow();
                if (linha >= 0) {
                    int id = Integer.parseInt((String) table_itens.getValueAt(linha, 0));

                    Item item = null;

                    for (Item i : listaDeItensSerie) {
                        if (i.getId() == id) {
                            item = i;
                            break;
                        }
                    }

                    if (item != null) {
                        listaDeItensSerie.remove(item);
                        if (manager.pesquisarItem(item.getId()) != null) {
                            cb_itens.addItem(String.format("[%04d] ", item.getId()) + item.getTitulo() + " [" + item.getTipo().getTitulo() + "]");
                        }
                        montaTabela();
                    }
                }
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar remover o item da série...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deletarItem

    /**
     * Abre a tela do item correspondente de acordo com o tipo de item
     * selecionado no combobox.
     *
     * @param evt O evento
     */
    private void inserirNovoItem(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirNovoItem
        TipoItem tipoItem = (TipoItem) cb_tipoItem.getSelectedItem();
        titulo = tf_titulo.getText();
        this.dispose();
        if (tipoItem.equals(TipoItem.HQ)) {
            TelaCadastroHQ telaHQ = new TelaCadastroHQ(null, true, 0);
            telaHQ.setInterfaceSerie(true);
            telaHQ.setVisible(true);
        } else if (tipoItem.equals(TipoItem.MIDIA)) {
            TelaCadastroMidia telaMidia = new TelaCadastroMidia(null, true, 0);
            telaMidia.setInterfaceSerie(true);
            telaMidia.setVisible(true);
        } else if (tipoItem.equals(TipoItem.JOGOVIDEOGAME)) {
            TelaCadastroGame telaGame = new TelaCadastroGame(null, true, 0);
            telaGame.setInterfaceSerie(true);
            telaGame.setVisible(true);
        } else if (tipoItem.equals(TipoItem.JOGOTABULEIRO)) {
            TelaCadastroTabuleiro telaTabuleiro = new TelaCadastroTabuleiro(null, true, 0);
            telaTabuleiro.setInterfaceSerie(true);
            telaTabuleiro.setVisible(true);
        }
    }//GEN-LAST:event_inserirNovoItem

    /**
     * Insere o item selecionado do combobox de itens na lista de itens da
     * serie.
     *
     * @param evt O evento
     */
    private void inserirItem(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirItem
        try {
            if (cb_itens.getItemCount() > 0) {
                String tempItem[] = ((String) cb_itens.getSelectedItem()).split("([\\[\\]])");
                Item itemSelecionado = manager.pesquisarItem(Integer.parseInt(tempItem[1]));

                if (itemSelecionado != null) {
                    listaDeItensSerie.add(itemSelecionado);
                    salvarSerie(null);
                }
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar selecionar item...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_inserirItem

    /**
     * Atualiza dados da série.
     *
     * @param evt O evento
     */
    private void salvarSerie(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarSerie
        try {
            if (validaCampos()) {
                // cadastra serie
                manager.atualizarSerie(getInterfaceSerie());

                // Se for diferente de null é sinal foi o botao salvar que chamaou o metodo, entao exibe mensagem se fecha a tela
                // caso contrário foi o metodo inserir item, entao popula novamente os components
                if (evt != null) {
                    JOptionPane.showMessageDialog(null, "Dados da Série atualizados com sucesso!", "Inserção", JOptionPane.INFORMATION_MESSAGE);
                    temp_titulo = tf_titulo.getText();
                    temp_listaDeItensSerie = listaDeItensSerie;
                    fecharJanela(null);
                } else {
                    refresh();
                }
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar atualizar a série...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_salvarSerie

    /**
     * Sinaliza item como possui ou não possui.
     *
     * @param evt O evento
     */
    private void PossuiItem(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PossuiItem
        try {
            int linha = table_itens.getSelectedRow();
            if (linha >= 0) {
                int idItem = Integer.parseInt((String) table_itens.getValueAt(linha, 0));
                Item itemSelecionado = null;
                for (Item i : listaDeItensSerie) {
                    if (i.getId() == idItem) {
                        itemSelecionado = i;
                        break;
                    }
                }
                Item item = itemSelecionado;
                String message = "";
                int opcao;

                /**
                 * Insere o item na lista de itens cadastrados no sistema
                 */
                if (isPossui()) {
                    opcao = JOptionPane.YES_OPTION;
                    item.setTotalEmprestado(0);
                    item.setEmprestado(false);
                    item.setPossui(true);
                    item.setDataDeCompra(MyData.getDataAtual());

                    /**
                     * Insere o item na lista de itens cadastrados no sistema
                     */
                    manager.inserirItem(item);
                    message = "O item foi sinalizado como item que você possui!\nO mesmo encontra-se disponível na sua lista de itens cadastrados...";
                } else {
                    opcao = JOptionPane.showConfirmDialog(null, "Deseja realmente sinalizar oomo item que vcoê não possui?"
                            + "\nTodas as referências do item serão perdidadas, como empréstimos, cadastro em seu acervo de itens...", "Sinalizar Item", JOptionPane.YES_NO_OPTION);
                    if (opcao == JOptionPane.YES_OPTION) {
                        item.setPossui(false);
                        /**
                         * Remove item da lista de itens cadastrados no sistema
                         */
                        manager.removerItem(item);
                        message = "O item foi sinalizado como item que você não possui!\nTodas as referências do mesmo no sistema foram perdidas...";
                    }
                }

                if (opcao == JOptionPane.YES_OPTION) {
                    /**
                     * Atualiza a lista de listaDeItensSerie e depois atualiza a
                     * série completa
                     */
                    listaDeItensSerie.set(listaDeItensSerie.indexOf(itemSelecionado), item);
                    manager.atualizarSerie(getInterfaceSerie());
                    refresh();
                    JOptionPane.showMessageDialog(null, message, "Atualização", JOptionPane.INFORMATION_MESSAGE);
                }

            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar marcar como adquirudo o item...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_PossuiItem

    /**
     * Método main.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroSerie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroSerie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroSerie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroSerie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TelaCadastroSerie dialog = new TelaCadastroSerie(new javax.swing.JFrame(), true, null, 0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    /**
     * Monta a tabela de itens.
     *
     */
    public void montaTabela() {
        DefaultTableModel modelTable = (DefaultTableModel) table_itens.getModel();
        modelTable.setNumRows(0); // Zera a tabela

        if (!listaDeItensSerie.isEmpty()) {
            // Ordena em ordem decrescente pelo id
            Collections.sort(listaDeItensSerie);

            for (Item itemVez : listaDeItensSerie) {
                Object[] o = {String.format("%04d", itemVez.getId()), itemVez.getTitulo(), itemVez.getTipo().getTitulo(), itemVez.getEstado(), itemVez.getStringPossui()};
                modelTable.addRow(o);
            }
            // Seta o total de itens que a série possui
            lb_total.setText(String.valueOf(listaDeItensSerie.size()));
        } else {
            bt_deletar.setEnabled(false);
        }
    }

    /**
     * Valida campos.
     *
     * @return <code>true</code> se a validação for bem sucedida ou
     * <code>false</code> caso não.
     */
    private boolean validaCampos() {
        try {
            if (tf_titulo.getText().isEmpty() || listaDeItensSerie.isEmpty()) {
                tf_titulo.grabFocus();
                throw new ValidacaoException("O prenechimento dos seguintes campos são obrigatórios:"
                        + "\nTítulo"
                        + "\n*Lista dos itens da série deve ter pelo menos um item.");
            } else {
                return true;
            }
        } catch (ValidacaoException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Problema na validação", JOptionPane.WARNING_MESSAGE);
        }
        return false;
    }

    /**
     * Popula combo com os itens disponíveis para inserir na série.
     *
     */
    private void populaComboItens() {
        try {
            cb_itens.removeAllItems();
            List<Item> listaItens = manager.getItensDisponivelSerie();

            for (Item item : listaItens) {
                if (!listaDeItensSerie.contains(item)) {
                    cb_itens.addItem(String.format("[%04d] ", item.getId()) + item.getTitulo() + " [" + item.getTipo().getTitulo() + "]");
                }
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar recuperar itens...", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Atualiza a tela populando a tabela de itens e combobox.
     *
     */
    private void refresh() {
        try {
            Serie s = manager.pesquisarSerie(idSerie);
            listaDeItensSerie = s.getItens();
            populaComboItens();
            montaTabela();
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar recuperar dados...", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Retorna o objeto série montado de acordo com os dados da tela de
     * cadastro.
     *
     * @return Serie
     */
    private Serie getInterfaceSerie() {
        titulo = tf_titulo.getText();
        manager.setIdSerie();
        return new Serie(getIdSerie(), titulo, getListaDeItens());
    }

    /**
     * Restaura os valores de componentes para o valor default.
     *
     */
    private void clearComponents() {
        titulo = "";
        listaDeItensSerie.clear();
    }

    /**
     * Preenche a tela com dados da série para edição.
     *
     */
    private void montaAlterarDados() {
        try {
            if (idSerie > 0) {
                Serie s = manager.pesquisarSerie(idSerie);
                if (s == null) {
                    fecharJanela(null);
                    throw new ValidacaoException("Não foi possível selecionar a série para edição. Tente novamente.");
                } else {
                    tf_titulo.setText(s.getTitulo());

                    listaDeItensSerie = s.getItens();
                }
            }
            montaTabela();
        } catch (ValidacaoException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Problema", JOptionPane.WARNING_MESSAGE);
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar recuperar a série...", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Retorna lista de itens da série.
     *
     * @return Lista de itens
     */
    public List<Item> getListaDeItens() {
        return listaDeItensSerie;
    }

    /**
     * Verifica se houve alteração de dados.
     *
     * @return <code>true</code> se houve alteração de dados ou
     * <code>false</code> caso não houve
     */
    private boolean isAlteracao() {
        if (!temp_titulo.equals(tf_titulo.getText()) || !temp_listaDeItensSerie.equals(listaDeItensSerie)) {
            return true;
        }
        return false;
    }

    /**
     * Seta flag.
     *
     * @param f valor da flag
     */
    public static void setFlag(boolean f) {
        TelaCadastroSerie.flag = f;
    }

    /**
     * Seta titulo da série.
     *
     * @param t Título da série
     */
    public static void setTitulo(String t) {
        TelaCadastroSerie.titulo = t;
    }

    /**
     * Recupera o id da série.
     *
     * @return O id da série
     */
    public static int getIdSerie() {
        return idSerie;
    }

    /**
     * Seta o id da série.
     *
     * @param idSerie Id da série
     */
    public static void setIdSerie(int idSerie) {
        TelaCadastroSerie.idSerie = idSerie;
    }

    /**
     * Verifica se o botao bt_possui estar no estado de "Possui" ou "Não Possui"
     *
     * @return <code>true</code> se for possui ou <code>false</code> caso não
     * seja
     */
    public boolean isPossui() {
        return bt_possui.getText().equals(STRPOSSUI);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_cancelar;
    private javax.swing.JButton bt_deletar;
    private javax.swing.JButton bt_inserir;
    private javax.swing.JButton bt_inserir_item;
    private javax.swing.JButton bt_novo_item;
    private javax.swing.JButton bt_possui;
    private javax.swing.JComboBox cb_itens;
    private javax.swing.JComboBox cb_tipoItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_total;
    private javax.swing.JTable table_itens;
    private javax.swing.JTextField tf_titulo;
    // End of variables declaration//GEN-END:variables

}
