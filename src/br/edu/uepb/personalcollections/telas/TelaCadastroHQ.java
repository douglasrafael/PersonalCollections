package br.edu.uepb.personalcollections.telas;

import br.edu.uepb.personalcollections.enums.Estado;
import br.edu.uepb.personalcollections.enums.TipoItem;
import br.edu.uepb.personalcollections.excecoes.PersonalCollectionsException;
import br.edu.uepb.personalcollections.excecoes.ValidacaoException;
import br.edu.uepb.personalcollections.gerenciador.Gerenciador;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import br.edu.uepb.personalcollections.HQ;
import br.edu.uepb.personalcollections.util.Validacao;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;

/**
 * Tela de Cadastro de HQ
 *
 * @author Douglas Rafael
 */
public class TelaCadastroHQ extends javax.swing.JDialog {

    private static final long serialVersionUID = 1285339136486948005L;

    private final String STRCADASTRAR = "Cadastrar";
    private final String STRATUALIZAR = "Atualizar";
    private static int id = 0;
    private boolean interfaceSerie = false;
    private boolean interfaceListaDeDesejo = false;
    private HQ hq;

    private Gerenciador manager;

    /**
     * Método construtor TelaCadastroHQ
     *
     * @param parent
     * @param modal
     * @param idHQ
     */
    public TelaCadastroHQ(java.awt.Frame parent, boolean modal, int idHQ) {
        super(parent, modal);

        manager = new Gerenciador();
        initComponents();
        // Se vier do contrutor um id é porque os dados deverão ser atualizados
        if (idHQ > 0) {
            montaAlterarDados(idHQ);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        group_lido = new javax.swing.ButtonGroup();
        panelPrincipal = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tf_titulo = new javax.swing.JTextField();
        tf_universo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tf_editora = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tf_saga = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cb_estado = new javax.swing.JComboBox();
        rb_nao = new javax.swing.JRadioButton();
        rb_sim = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tf_obs = new javax.swing.JTextArea();
        bt_inserir = new javax.swing.JButton();
        bt_cancelar = new javax.swing.JButton();
        sp_nota = new javax.swing.JSpinner();
        tf_preco = new javax.swing.JFormattedTextField();
        tf_numero = new javax.swing.JFormattedTextField();
        bt_deletar = new javax.swing.JButton();
        tf_data_compra = new datechooser.beans.DateChooserCombo();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de HQ's");
        setIconImage(new ImageIcon("images/logo.png").getImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                fecharJanela(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Título");

        tf_titulo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tf_titulo.setMargin(new java.awt.Insets(2, 5, 2, 2));

        tf_universo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tf_universo.setMargin(new java.awt.Insets(2, 5, 2, 2));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Número");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Editora");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Universo");

        tf_editora.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tf_editora.setMargin(new java.awt.Insets(2, 5, 2, 2));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Saga");

        tf_saga.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tf_saga.setMargin(new java.awt.Insets(2, 5, 2, 2));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Data de Compra");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Já foi lido?");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Preço");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Estado");

        cb_estado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cb_estado.setModel(new DefaultComboBoxModel(Estado.values()));

        group_lido.add(rb_nao);
        rb_nao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rb_nao.setSelected(true);
        rb_nao.setText("Não");

        group_lido.add(rb_sim);
        rb_sim.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rb_sim.setText("Sim");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Nota do Item");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Observações");

        tf_obs.setColumns(20);
        tf_obs.setRows(5);
        tf_obs.setMargin(new java.awt.Insets(2, 5, 2, 2));
        jScrollPane1.setViewportView(tf_obs);

        bt_inserir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_inserir.setIcon(new ImageIcon("images/save.png"));
        bt_inserir.setText("Cadastrar");
        bt_inserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acao(evt);
            }
        });

        bt_cancelar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_cancelar.setIcon(new ImageIcon("images/cancel.png"));
        bt_cancelar.setText("Cancelar");
        bt_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar(evt);
            }
        });

        sp_nota.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        sp_nota.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(10.0f), Float.valueOf(1.0f)));

        tf_preco.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        tf_preco.setMargin(new java.awt.Insets(2, 5, 2, 2));

        tf_numero.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
        tf_numero.setMargin(new java.awt.Insets(2, 5, 2, 2));

        bt_deletar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bt_deletar.setIcon(new ImageIcon("images/delete.png"));
        bt_deletar.setText("Deletar");
        bt_deletar.setEnabled(false);
        bt_deletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeHQ(evt);
            }
        });

        tf_data_compra.setFormat(2);
        tf_data_compra.setFieldFont(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 12));

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tf_saga, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(tf_numero, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(158, 158, 158))
                                    .addComponent(tf_editora)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelPrincipalLayout.createSequentialGroup()
                                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel1)
                                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                                        .addComponent(rb_sim)
                                        .addGap(18, 18, 18)
                                        .addComponent(rb_nao))
                                    .addComponent(tf_data_compra, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42)
                                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tf_preco, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(sp_nota, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel8))
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel4)
                                .addGap(190, 190, 190))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipalLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tf_universo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cb_estado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addComponent(tf_titulo)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPrincipalLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bt_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_deletar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_inserir, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tf_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tf_universo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_editora, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_numero, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tf_saga, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_preco, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(7, 7, 7)
                                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rb_sim)
                                    .addComponent(rb_nao)))
                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(6, 6, 6)
                                .addComponent(sp_nota, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1))))
                    .addGroup(panelPrincipalLayout.createSequentialGroup()
                        .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tf_data_compra, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelPrincipalLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cb_estado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_inserir, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_deletar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Fecha Janela.
     *
     * @param evt
     */
    private void fecharJanela(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_fecharJanela
        this.dispose();
        // Se nao veio da tela de cadastro de serie
        if (isInterfaceSerie()) {
            TelaCadastroSerie.setFlag(false);
            TelaCadastroSerie telaCadastroSerie = new TelaCadastroSerie(null, true, getHq(), TelaCadastroSerie.getIdSerie());
            telaCadastroSerie.setVisible(true);
        } else if (isInterfaceListaDeDesejo()) {
            new TelaCadastroListaDeDesejo(null, true, getHq()).setVisible(true);
        } else {
            // Se nao veio da tela de cadastro de serie nem de lista de desejo
            new TelaItens(null, true).setVisible(true);
        }
    }//GEN-LAST:event_fecharJanela

    /**
     * Fecha janela.
     *
     * @param evt
     */
    private void cancelar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar
        fecharJanela(null);
    }//GEN-LAST:event_cancelar

    /**
     * Verifica se à ação é de inserção ou atualização
     *
     * @param evt
     */
    private void acao(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acao
        try {
            if (Validacao.validarCamposVazios(panelPrincipal, getCamposValidar())) {
                throw new ValidacaoException("O prenechimento dos seguintes campos são obrigatórios:"
                        + "\nTítulo"
                        + "\nNúmero"
                        + "\nEditora"
                        + "\nUniverso");
            } else {
                HQ hq = getHQInterface();
                if (hq != null) {
                    if (isInsert()) {
                        inserir(hq);
                    } else if (isUpadate()) {
                        atualizar(hq);
                    }
                }
            }
        } catch (ValidacaoException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Problema na validação", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_acao

    /**
     * Remoev HQ
     *
     * @param evt
     */
    private void removeHQ(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeHQ
        try {
            if (getId() > 0) {
                int opcao = JOptionPane.showConfirmDialog(null, "Deseja realmente remover o item: " + tf_titulo.getText() + "?", "Deletar item", JOptionPane.YES_NO_OPTION);
                if (opcao == JOptionPane.YES_OPTION) {
                    if (!manager.removerHQ(getId())) {
                        throw new PersonalCollectionsException("Não foi possível remover o item: " + tf_titulo.getText());
                    } else {
                        JOptionPane.showMessageDialog(null, "Item removido com sucesso!", "Remorção", JOptionPane.INFORMATION_MESSAGE);
                        fecharJanela(null);
                    }
                }
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Problema na exclusão!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_removeHQ

    /**
     * Insere item
     *
     * @param hq
     */
    private void inserir(HQ hq) {
        try {
            // Verifica se a tela não foi aberta via tela de serie
            if (isInterfaceSerie()) {
                hq.setPossui(false);
                setHq(hq);
                JOptionPane.showMessageDialog(null, "Item inserido na lista de série com sucesso!", "Inserção", JOptionPane.INFORMATION_MESSAGE);
                fecharJanela(null);
            } else if (isInterfaceListaDeDesejo()) {
                hq.setPossui(false);
                setHq(hq);
                JOptionPane.showMessageDialog(null, "Item foi pré-inserido na lista de desejo com sucesso!", "Inserção", JOptionPane.INFORMATION_MESSAGE);
                fecharJanela(null);
            } else {
                manager.inserirItem(hq);
                JOptionPane.showMessageDialog(null, "Item insirido com sucesso!", "Inserção", JOptionPane.INFORMATION_MESSAGE);
                limpaCampos();
                tf_titulo.grabFocus();
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar inserir o item", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Atualiza dados da HQ
     *
     * @param hq
     */
    private void atualizar(HQ hq) {
        try {
            if (isInterfaceListaDeDesejo()) {
                hq.setPossui(false);
                setHq(hq);
                JOptionPane.showMessageDialog(null, "Item pré-inserido na lista de desejo foi atualizado com sucesso!", "Atualização", JOptionPane.INFORMATION_MESSAGE);
                fecharJanela(null);
            } else {
                manager.atualizarItem(hq);
                JOptionPane.showMessageDialog(null, "Item atualizado com sucesso!", "Atualização", JOptionPane.INFORMATION_MESSAGE);
                fecharJanela(null);
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar atualizar o item", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Preenche a interface gráfica com os dados para atualização de acordo com
     * o id da HQ
     *
     * @param idHQ Id da HQ
     */
    private void montaAlterarDados(int idHQ) {
        try {
            HQ h = manager.pesquisarHQ(idHQ);
            if (h != null) {
                montaAlterarDados(h);
            }
        } catch (PersonalCollectionsException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar montar os dados do item para atualização", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Preenche a interface gráfica com dados para atualização de acordo com o
     * objeto HQ.
     *
     * @param hq Objeto contendo os dados
     */
    public void montaAlterarDados(HQ hq) {
        try {
            if (hq != null) {
                setHq(hq);
                bt_deletar.setEnabled(true); // habilita o botao deletar
                TelaCadastroHQ.id = hq.getId(); // seta o valor do id para variavel static 
                bt_inserir.setText(STRATUALIZAR);

                tf_titulo.setText(hq.getTitulo());
                tf_numero.setValue(hq.getNumero());
                tf_editora.setText(hq.getEditora());
                tf_universo.setText(hq.getUniverso());
                tf_saga.setText(hq.getSaga());

                String dataCompra = hq.getDataDeCompra();
                // prepara a data e seta no campo
                if (!dataCompra.isEmpty()) {
                    SimpleDateFormat dataFormat = new SimpleDateFormat("dd/MM/yyyy");
                    Calendar c = Calendar.getInstance();
                    c.setTime(dataFormat.parse(dataCompra));
                    tf_data_compra.setSelectedDate(c);
                } else {
                    tf_data_compra.setSelectedDate(null);
                }

                tf_preco.setValue(hq.getPrecoDeCompra());
                cb_estado.setSelectedItem(hq.getEstado());
                sp_nota.setValue(hq.getNota());
                tf_obs.setText(hq.getObservacao());
                if (hq.isLido()) {
                    rb_sim.setSelected(true);
                }
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao tentar montar a data...", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Verifica se o estado do form é de inserção
     *
     * @return <code>true</code> se for insert ou <code>false</code> caso não
     * seja
     */
    public boolean isInsert() {
        return bt_inserir.getText().equals(STRCADASTRAR);
    }

    /**
     * Verifica se o estado do form é de atualização
     *
     * @return <code>true</code> se for insert ou <code>false</code> caso não
     * seja
     */
    public boolean isUpadate() {
        return bt_inserir.getText().equals(STRATUALIZAR);
    }

    /**
     * Retorna o valor de id, o qual é uma variavel static da classe
     *
     * @return int
     */
    private int getId() {
        return TelaCadastroHQ.id;
    }

    /**
     * Método main.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroHQ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroHQ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroHQ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroHQ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TelaCadastroHQ dialog = new TelaCadastroHQ(new javax.swing.JFrame(), true, 0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    /**
     * Monta o objeto HQ com os dados oriundos da interface
     *
     * @return HQ
     */
    private HQ getHQInterface() {
        String titulo = tf_titulo.getText();
        int numero = Math.abs(Integer.parseInt(tf_numero.getText())); // Número sempre positivo
        String editora = tf_editora.getText();
        String universo = tf_universo.getText();
        String saga = tf_saga.getText();
        String dataCompra = tf_data_compra.getText();
        Double precoDeCompra = (tf_preco.getValue() != null) ? Double.parseDouble(String.valueOf(tf_preco.getValue())) : 0.0;
        Estado estado = (Estado) cb_estado.getSelectedItem();
        boolean lido = rb_sim.isSelected() ? true : false;
        Double nota = (sp_nota.getValue() != null) ? Double.parseDouble(String.valueOf(sp_nota.getValue())) : 0.0;
        String observacao = tf_obs.getText();

        // Se não for inserir é atualizar ou deletar
        if (isInsert()) {
            manager.setIdItem();
            return new HQ(titulo, observacao, dataCompra, precoDeCompra, 0, nota, estado, false, TipoItem.HQ, numero, editora, saga, universo, lido);
        } else {
            return new HQ(getId(), titulo, observacao, dataCompra, precoDeCompra, getHq().getTotalEmprestado(), nota, estado, getHq().isEmprestado(), TipoItem.HQ, numero, editora, saga, universo, lido);
        }
    }

    /**
     * Retorna os campos que devem ser validados (obrigatórios)
     *
     * @return Lista com os components
     */
    public List<Component> getCamposValidar() {
        List<Component> components = new ArrayList<>();
        components.add(tf_titulo);
        components.add(tf_numero);
        components.add(tf_editora);
        components.add(tf_universo);
        return components;
    }

    /**
     * Limpa todos os campos
     */
    private void limpaCampos() {
        Component components[] = panelPrincipal.getComponents();
        for (Component component : components) {
            if (component instanceof JTextField) {
                ((JTextField) component).setText("");
            }
        }
        tf_data_compra.setSelectedDate(Calendar.getInstance());
        cb_estado.setSelectedIndex(0);
        sp_nota.setValue(0);
        tf_obs.setText("");
        rb_nao.setSelected(true);
    }

    /**
     * Recupera o HQ para edição.
     *
     * @return
     */
    public HQ getHq() {
        return hq;
    }

    /**
     * Seta o HQ para edição.
     *
     * @param hq
     */
    public void setHq(HQ hq) {
        this.hq = hq;
    }

    /**
     * Retorna <code>true</code> se foi a interface gráfica TelaCadastroSerie
     * que chamou ou <code>false</code> caso nao.
     *
     * @return <code>true</code> ou <code>false</code>
     */
    public boolean isInterfaceSerie() {
        return interfaceSerie;
    }

    /**
     * Seta se foi a interface grafica TelaCadastroSerie que chamou a tela ou
     * nao.
     *
     * @param interfaceSerie
     */
    public void setInterfaceSerie(boolean interfaceSerie) {
        this.interfaceSerie = interfaceSerie;
    }

    /**
     * Retorna <code>true</code> se foi a interface gráfica
     * TelaCadastroListaDeDesejo que chamou ou <code>false</code> caso nao.
     *
     * @return <code>true</code> ou <code>false</code>
     */
    public boolean isInterfaceListaDeDesejo() {
        return interfaceListaDeDesejo;
    }

    /**
     * Seta se foi a interface grafica TelaCadastroListaDeDesejo que chamou a
     * tela ou nao.
     *
     * @param interfaceLista
     */
    public void setInterfaceListaDeDesejo(boolean interfaceLista) {
        this.interfaceListaDeDesejo = interfaceLista;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_cancelar;
    private javax.swing.JButton bt_deletar;
    private javax.swing.JButton bt_inserir;
    private javax.swing.JComboBox cb_estado;
    private javax.swing.ButtonGroup group_lido;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JRadioButton rb_nao;
    private javax.swing.JRadioButton rb_sim;
    private javax.swing.JSpinner sp_nota;
    private datechooser.beans.DateChooserCombo tf_data_compra;
    private javax.swing.JTextField tf_editora;
    private javax.swing.JFormattedTextField tf_numero;
    private javax.swing.JTextArea tf_obs;
    private javax.swing.JFormattedTextField tf_preco;
    private javax.swing.JTextField tf_saga;
    private javax.swing.JTextField tf_titulo;
    private javax.swing.JTextField tf_universo;
    // End of variables declaration//GEN-END:variables

}
